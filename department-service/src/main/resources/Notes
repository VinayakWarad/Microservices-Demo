Dependencies :
Step 1 : web, Actuator, Discovery client , Spring-cloud-starter-config

Step 2 : Main class -> @EnableDiscoveryClient

Step 3 : app.yaml
service name
url to connect to eureka server (Discovery) // Move this to config server later

*************************************************************
Microservice communication :

Let's bring Eureka, Config, Department and Employee service up.
We want to make webclient call from dept service to Employee service to fetch employees list working in speicific dept.

step 1 : Emp service
* @PostMapping("/addEmp") -> Using this API post employee details using below payload
(Later we will fetch required emps based on dept we require)
* http://localhost:8083/employee/addEmp
Employee list Payload ->
[
{"id":21,"departmentId":2,"name":"Vinayak-SSE","age": 29,"position":"SSE"},
{"id":22,"departmentId":2,"name":"Vinayak-SE","age": 29,"position":"SE"},
{"id":31,"departmentId":3,"name":"Kiran-SME","age": 29,"position":"SME"},
{"id":32,"departmentId":3,"name":"Kiran-SMESenior","age": 29,"position":"SMESenior"},
{"id":41,"departmentId":4,"name":"Sangu-SE","age": 29,"position":"ARCH"}
]

step 2 : Dept Service
*Below Endpoint is the one that does webclient call for us
@GetMapping("/emps/{departmentId}")
         public List<Employee> empsByDeptId(@PathVariable Long departmentId){ }
* http://localhost:8082/department/emps/{departmentId}
Sample output for departmentId=2

[
{"id": 21,"departmentId": 2,"name": "Vinayak-SSE","age": 29,"position": "SSE"},
 {"id": 22,"departmentId": 2,"name": "Vinayak-SE","age": 29, "position": "SE"}
]
*******************************************************
Employee payload :
{
"id":55,
"departmentId":5,
"name":"Antony-Arch",
"age": 50,
"position":"Architect"
}

****************************************************************

 .bodyToMono(String.class) ->

String.class when you manually want to parse the response else you can
directly use Employee.class i,e directly parsing the Json response
to employee.class will happen and you don't need to use below mapper logic

        ObjectMapper mapper = new ObjectMapper();
        return mapper.readValue(jsonStr, Employee.class);

****************************************************************

.header(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)
HttpHeaders.ACCEPT -> Denotes what is response it accepts

.contentType(MediaType.APPLICATION_JSON) -> Sets request body format

***************************************************************

